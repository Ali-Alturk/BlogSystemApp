// <auto-generated />
using System;
using BlogSystemApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogSystemApp.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20250625090855_EnhancedBlogModels")]
    partial class EnhancedBlogModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("BlogSystemApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#007bff",
                            CreatedDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(640),
                            Description = "Latest technology trends and tutorials",
                            IsActive = true,
                            Name = "Technology",
                            Slug = "technology"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#28a745",
                            CreatedDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(645),
                            Description = "Programming tutorials and best practices",
                            IsActive = true,
                            Name = "Programming",
                            Slug = "programming"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#17a2b8",
                            CreatedDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(648),
                            Description = "Web development tutorials and frameworks",
                            IsActive = true,
                            Name = "Web Development",
                            Slug = "web-development"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#6c757d",
                            CreatedDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(651),
                            Description = "General blog posts and announcements",
                            IsActive = true,
                            Name = "General",
                            Slug = "general"
                        });
                });

            modelBuilder.Entity("BlogSystemApp.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnonymousEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("AnonymousName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AnonymousWebsite")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnonymousEmail = "",
                            AnonymousName = "",
                            AnonymousWebsite = "",
                            AuthorId = 3,
                            CommentDate = new DateTime(2025, 6, 25, 10, 8, 53, 168, DateTimeKind.Local).AddTicks(1419),
                            Content = "Great introduction to the new blog system! I'm excited to see all these new features.",
                            CreatedDate = new DateTime(2025, 6, 25, 10, 8, 53, 168, DateTimeKind.Local).AddTicks(1421),
                            IpAddress = "",
                            IsApproved = true,
                            IsDeleted = false,
                            PostId = 1,
                            UserAgent = ""
                        },
                        new
                        {
                            Id = 2,
                            AnonymousEmail = "",
                            AnonymousName = "",
                            AnonymousWebsite = "",
                            AuthorId = 3,
                            CommentDate = new DateTime(2025, 6, 25, 8, 8, 53, 168, DateTimeKind.Local).AddTicks(1428),
                            Content = "This is exactly what I was looking for! The MVC pattern explanation is very clear.",
                            CreatedDate = new DateTime(2025, 6, 25, 8, 8, 53, 168, DateTimeKind.Local).AddTicks(1429),
                            IpAddress = "",
                            IsApproved = true,
                            IsDeleted = false,
                            PostId = 2,
                            UserAgent = ""
                        },
                        new
                        {
                            Id = 3,
                            AnonymousEmail = "reader@example.com",
                            AnonymousName = "Anonymous Reader",
                            AnonymousWebsite = "",
                            CommentDate = new DateTime(2025, 6, 25, 11, 8, 53, 168, DateTimeKind.Local).AddTicks(1432),
                            Content = "Thanks for this comprehensive guide on Entity Framework Core. Very helpful!",
                            CreatedDate = new DateTime(2025, 6, 25, 11, 8, 53, 168, DateTimeKind.Local).AddTicks(1433),
                            IpAddress = "",
                            IsApproved = true,
                            IsDeleted = false,
                            PostId = 3,
                            UserAgent = ""
                        });
                });

            modelBuilder.Entity("BlogSystemApp.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FeaturedImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 4,
                            Content = "Welcome to our newly enhanced blog system! This platform now features a comprehensive user management system, categorized posts, and an improved commenting system.\r\n\r\n## New Features\r\n\r\n### User Management\r\n- User registration and authentication\r\n- Role-based access control (Admin, Editor, User)\r\n- User profiles with bio and profile pictures\r\n\r\n### Enhanced Posts\r\n- Categories for better organization\r\n- Featured posts highlighting\r\n- SEO-friendly URLs with slugs\r\n- Meta descriptions for better search engine optimization\r\n\r\n### Improved Comments\r\n- Support for both registered users and anonymous comments\r\n- Comment moderation system\r\n- Better spam protection\r\n\r\n### Better Organization\r\n- Categories with custom colors\r\n- Tag system for cross-referencing content\r\n- Advanced search and filtering options\r\n\r\nWe hope you enjoy these new features and find them useful for creating and managing your blog content!",
                            CreatedDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1346),
                            FeaturedImage = "",
                            IsFeatured = true,
                            IsPublished = true,
                            MetaDescription = "Welcome to our enhanced blog system with user management, categories, and improved commenting.",
                            PublicationDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1345),
                            Slug = "welcome-to-enhanced-blog-system",
                            Summary = "Introduction to our enhanced blog system with new user management, categories, and improved features.",
                            Tags = "welcome, features, blog-system, announcement",
                            Title = "Welcome to Our Enhanced Blog System",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CategoryId = 2,
                            Content = "ASP.NET Core MVC is a powerful framework for building modern web applications. In this comprehensive guide, we'll explore the fundamentals of creating a web application with ASP.NET Core MVC.\r\n\r\n## What is ASP.NET Core MVC?\r\n\r\nASP.NET Core MVC is a rich framework for building web apps and APIs using the Model-View-Controller design pattern. It provides a way to build dynamic websites that enables a clean separation of concerns.\r\n\r\n## Key Features\r\n\r\n### Model-View-Controller Pattern\r\n- **Models**: Represent data and business logic\r\n- **Views**: Handle the display of information\r\n- **Controllers**: Handle user input and interaction\r\n\r\n### Dependency Injection\r\nASP.NET Core has built-in support for dependency injection, making your applications more testable and maintainable.\r\n\r\n### Cross-Platform\r\nRun on Windows, macOS, and Linux.\r\n\r\n## Creating Your First MVC Application\r\n\r\n1. Install the .NET SDK\r\n2. Create a new project: `dotnet new mvc`\r\n3. Run the application: `dotnet run`\r\n\r\n## Best Practices\r\n\r\n- Use proper naming conventions\r\n- Implement proper error handling\r\n- Follow SOLID principles\r\n- Write unit tests\r\n- Use async/await for I/O operations\r\n\r\nThis is just the beginning of your ASP.NET Core MVC journey. Stay tuned for more advanced topics!",
                            CreatedDate = new DateTime(2025, 6, 24, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1358),
                            FeaturedImage = "",
                            IsFeatured = false,
                            IsPublished = true,
                            MetaDescription = "Learn ASP.NET Core MVC fundamentals, key features, and best practices for building modern web applications.",
                            PublicationDate = new DateTime(2025, 6, 24, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1353),
                            Slug = "getting-started-aspnet-core-mvc",
                            Summary = "A comprehensive introduction to ASP.NET Core MVC covering the basics, key features, and best practices.",
                            Tags = "asp.net, core, mvc, tutorial, web-development",
                            Title = "Getting Started with ASP.NET Core MVC",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CategoryId = 3,
                            Content = "Entity Framework Core (EF Core) is a lightweight, extensible, open source and cross-platform version of the popular Entity Framework data access technology.\r\n\r\n## What is Entity Framework Core?\r\n\r\nEF Core serves as an object-relational mapper (O/RM), which:\r\n- Enables .NET developers to work with a database using .NET objects\r\n- Eliminates the need for most of the data-access code that typically needs to be written\r\n\r\n## Key Features\r\n\r\n### Code First Approach\r\nDefine your model using C# classes and let EF Core create the database schema.\r\n\r\n### Database First Approach\r\nGenerate your model from an existing database.\r\n\r\n### LINQ Support\r\nWrite queries using LINQ syntax that gets translated to SQL.\r\n\r\n### Migration System\r\nManage database schema changes over time.\r\n\r\n## Getting Started\r\n\r\n### 1. Install the Package\r\n```bash\r\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\r\n```\r\n\r\n### 2. Define Your Models\r\n```csharp\r\npublic class Blog\r\n{\r\n    public int BlogId { get; set; }\r\n    public string Url { get; set; }\r\n    public List<Post> Posts { get; set; }\r\n}\r\n```\r\n\r\n### 3. Create a DbContext\r\n```csharp\r\npublic class BloggingContext : DbContext\r\n{\r\n    public DbSet<Blog> Blogs { get; set; }\r\n    public DbSet<Post> Posts { get; set; }\r\n}\r\n```\r\n\r\n### 4. Use Your Context\r\n```csharp\r\nusing (var context = new BloggingContext())\r\n{\r\n    var blogs = context.Blogs.ToList();\r\n}\r\n```\r\n\r\n## Best Practices\r\n\r\n- Use async methods for database operations\r\n- Implement proper error handling\r\n- Use migrations for schema changes\r\n- Consider performance implications\r\n- Use proper indexing strategies\r\n\r\nEF Core makes data access in .NET applications much more manageable and productive!",
                            CreatedDate = new DateTime(2025, 6, 23, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1366),
                            FeaturedImage = "",
                            IsFeatured = true,
                            IsPublished = true,
                            MetaDescription = "Comprehensive guide to Entity Framework Core for modern web development with best practices and examples.",
                            PublicationDate = new DateTime(2025, 6, 23, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1365),
                            Slug = "modern-web-development-entity-framework-core",
                            Summary = "Learn about Entity Framework Core, its features, and how to use it effectively in modern web development.",
                            Tags = "entity-framework, core, orm, database, web-development",
                            Title = "Modern Web Development with Entity Framework Core",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("BlogSystemApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "System administrator and main blog author",
                            CreatedDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1271),
                            Email = "admin@blogsystem.com",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            PasswordHash = "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeWpjDOCHBVrXLOyu",
                            ProfilePicture = "",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Content editor and reviewer",
                            CreatedDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1276),
                            Email = "editor@blogsystem.com",
                            FirstName = "Blog",
                            IsActive = true,
                            LastName = "Editor",
                            PasswordHash = "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeWpjDOCHBVrXLOyu",
                            ProfilePicture = "",
                            Role = "Editor",
                            Username = "editor"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Technology enthusiast and blogger",
                            CreatedDate = new DateTime(2025, 6, 25, 12, 8, 53, 168, DateTimeKind.Local).AddTicks(1280),
                            Email = "john@example.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            PasswordHash = "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeWpjDOCHBVrXLOyu",
                            ProfilePicture = "",
                            Role = "User",
                            Username = "johndoe"
                        });
                });

            modelBuilder.Entity("BlogSystemApp.Models.Comment", b =>
                {
                    b.HasOne("BlogSystemApp.Models.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BlogSystemApp.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BlogSystemApp.Models.Post", b =>
                {
                    b.HasOne("BlogSystemApp.Models.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogSystemApp.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BlogSystemApp.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BlogSystemApp.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BlogSystemApp.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
